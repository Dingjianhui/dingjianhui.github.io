<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>defer on Ding Jianhui 的个人博客 - 学习笔记</title>
    <link>http://dingjianhui.top/tags/defer/</link>
    <description>Recent content in defer on Ding Jianhui 的个人博客 - 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 Jun 2020 09:04:03 +0800</lastBuildDate>
    
	<atom:link href="http://dingjianhui.top/tags/defer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Defer 的使用</title>
      <link>http://dingjianhui.top/blog/2020/06/24/go-defer-used/</link>
      <pubDate>Wed, 24 Jun 2020 09:04:03 +0800</pubDate>
      
      <guid>http://dingjianhui.top/blog/2020/06/24/go-defer-used/</guid>
      <description>defer介绍 关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 return 语句之后）一刻才执行某个语句或函数 （为什么要在返回之后才执行这些语句？因为 return 语句同样可以包含一些操作，而不是单纯地返回某个值）。
常用于释放某些已分配的资源、关闭数据库连接、断开Socket连接、解锁一个加锁的资源
关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 finally 语句块，它一般用于释放某些已分配的资源。
三个简单的规则：
1.defer定义时,defer函数的参数就被确定了 示例：
package main import &amp;#34;fmt&amp;#34; func main() { DeferDef() DeferDef1() DeferDef2() } func DeferDef() { count := 1 defer fmt.Println(&amp;#34;defer executed, count的值为&amp;#34;,count) count++ fmt.Println(&amp;#34;before defer,count的值为&amp;#34;,count) } func DeferDef1() { count := 1 defer func(count int) { fmt.Println(&amp;#34;defer executed, count的值为&amp;#34;,count) }(count) count++ fmt.Println(&amp;#34;before defer,count的值为&amp;#34;,count) } func DeferDef2() { count := 1 defer func() { fmt.</description>
    </item>
    
  </channel>
</rss>