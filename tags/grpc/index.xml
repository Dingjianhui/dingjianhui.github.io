<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grpc on Ding Jianhui 的个人博客 - 学习笔记</title>
    <link>http://dingjianhui.top/tags/grpc/</link>
    <description>Recent content in grpc on Ding Jianhui 的个人博客 - 学习笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 01 Jul 2020 13:45:32 +0800</lastBuildDate>
    
	<atom:link href="http://dingjianhui.top/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Protobuf Grammar (Protobu3)</title>
      <link>http://dingjianhui.top/blog/2020/07/01/protobuf-grammar/</link>
      <pubDate>Wed, 01 Jul 2020 13:45:32 +0800</pubDate>
      
      <guid>http://dingjianhui.top/blog/2020/07/01/protobuf-grammar/</guid>
      <description>Protobuf[1] 是一种语言中立、平台无关、可扩展的序列化数据的格式，可用于通信协议，数据存储等。
ProtoBuf 在序列化数据方面，它是灵活的、高效的。 相比于 XML 来说，ProtoBuf 更加小巧、更加快速、更加简单。 一旦定义了要处理的数据的数据结构之后，就可以利用 ProtoBuf 的代码生成工具生成相关的代码。 甚至可以在无需重新部署程序的情况下更新数据结构。 只需使用 ProtoBuf 对数据结构进行一次描述，即可利用各种不同语言或从各种不同数据流中对你的结构化数据轻松读写。
ProtoBuf 很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等 领域的语言无关、平台无关、可扩展的序列化结构数据格式。
 Message 定义 在 Protobuf 中，所有结构化的数据都被称为 message。 假设你想要查询某个接口，这个接口需要传递些参数关键字和分页参数（当前页和每页记录数）， 那么我们就可以把这些参数都定义成一个对象，用 Protobuf 的话说就是定义一个 message。
如下：我们有一个服务为通过商品ID来获取商品的库存, 那么我们需要定义商品ID请求参数prod_id,定义库存响应字段prod_stock
syntax=&amp;#34;proto3&amp;#34;;package services;message ProdRequest { int32 prod_id = 1; // 传入的商品ID }message ProdResponse { int32 prod_stock = 1; // 响应的商品库存 }service ProdService { rpc GetProdStock (ProdRequest) returns (ProdResponse); // 通过商品ID获取商品库存方法 } syntax = &amp;quot;proto3&amp;quot;; 指定了整个 .proto 文件使用 Protobuf3 解析，否则默认会使用 Protobuf2 解析，必须将其放置在文件的第一行。 ProdRequest 这个 message 指定了1个数据字段，数据字段定义由 Field Types 数据类型 + Field Names 字段名 = Field Numbers 编号组成。 service 定义了 RPC 服务  字段类型   基础类型</description>
    </item>
    
    <item>
      <title>Go Grpc Gateway</title>
      <link>http://dingjianhui.top/blog/2020/06/30/go-grpc-gateway/</link>
      <pubDate>Tue, 30 Jun 2020 14:53:25 +0800</pubDate>
      
      <guid>http://dingjianhui.top/blog/2020/06/30/go-grpc-gateway/</guid>
      <description>前言 grpc很棒-支持多种语言来构建rpc服务,快速、易于使用、带宽高效， 但是我们仍然希望提供供传统的RESTful JSON API，兼容老系统
通常我们把rpc用作内部通信，而使用RESTful Api进行外部通信
服务器收到Http请求后grpc-gateway把他转换成grpc处理，然后以JSON格式返回
安装  安装 Protocol buffer 编译器(protoc) V3版本 https://github.com/protocolbuffers/protobuf/releases 安装 Protocol buffer 编译器的 Go插件 (protoc-gen-go) go get github.com/golang/protobuf/protoc-gen-go 安装 Protocol buffer 编译器的插件-grpc-gateway go get github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway 安装 Protocol buffer 编译器的插件-swagger go get github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger  使用 1. 使用Protocol buffer定义gRPC服务 server/pbfiles/Prod.proto:  syntax=&amp;#34;proto3&amp;#34;;package services;message ProdRequest { int32 prod_id =1; //传入的商品ID }message ProdResponse{ int32 prod_stock=1;//商品库存 }service ProdService { rpc GetProdStock (ProdRequest) returns (ProdResponse);}2. 添加google.api.http annotation 到 *.proto 文件中 可以将文件拷至 server/pbfiles中，也可以引用外部资源的方式 server/pbfiles/Prod.</description>
    </item>
    
    <item>
      <title>Go Grpc Quick Start</title>
      <link>http://dingjianhui.top/blog/2020/06/28/go-grpc-quick-start/</link>
      <pubDate>Sun, 28 Jun 2020 13:47:36 +0800</pubDate>
      
      <guid>http://dingjianhui.top/blog/2020/06/28/go-grpc-quick-start/</guid>
      <description>对于分布式系统而言,不同的服务分布在不同的节点上,一个服务要完成自己的功能经常需要调用其他服务的接口,比如典型的微服务架构。 通常这种服务调用方式有两种,一种是发送HTTP请求的方式,另一种则是RPC的方式,RPC是Remote Procedure Call(远程过程调用)的简称, 可以让我们像调用本地接口一样使用远程服务。相比HTTP调用,RPC的方式至少在以下几个方面有优势
  传输效率
RPC可以自定义TCP报文,基于TCP协议进行通信,比如dubbo;同时也支持使用HTTP2协议进行通信,比如gRPC。这相比传统的HTTP1.1协议报文体积会更小,传输效率会更高。
  性能消耗
RPC框架通常自带高效的序列化机制,序列化和反序列化耗时更低,序列化后的字节数通常也更小。
  负责均衡
RPC框架通常自带负载均衡策略,而HTTP请求要做负载均衡需要外部应用如Nginx的支持。
  服务治理
下游服务新增,重启,下线时能自动通知上游使用者,而HTTP的方式需要事先通知并修改相关配置。
  grpc介绍 gRPC是由Google开发并开源的RPC框架,它具有以下特点
  语言中立
支持C,Java,Go等多种语言来构建RPC服务,这是gRPC被广泛的应用在微服务项目中的重要原因,因为不同的微服务可能用不同的语言构建。
  基于HTTP/2协议
支持双向流,消息头压缩,单TCP的多路复用,服务端推送等,这些特性使得gRPC更加适用于移动场景下的客户端和服务端之间的通信。
  基于IDL定义服务
编写.proto文件即可生成特定语言的数据结构、服务端接口和客户端Stub。
  支持Protocol Buffer序列化
Protocol Buffer是由Google开发的一种数据序列化协议(类似于XML、JSON、Hession),平台无关,压缩和传输效率高,语法简单,表达能力强。
  使用前的准备工作   安装go
  安装 Protocol buffer 编译器(protoc) V3版本 https://github.com/protocolbuffers/protobuf/releases
  安装 Protocol buffer 编译器的 Go插件 (protoc-gen-go) go get github.com/golang/protobuf/protoc-gen-go
Google Protocol Buffer( 简称 Protobuf)</description>
    </item>
    
  </channel>
</rss>