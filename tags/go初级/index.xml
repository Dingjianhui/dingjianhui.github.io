<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go初级 on Ding Jianhui 的个人博客 - 笔记</title>
    <link>http://dingjianhui.top/tags/go%E5%88%9D%E7%BA%A7/</link>
    <description>Recent content in go初级 on Ding Jianhui 的个人博客 - 笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>dingo(Ding JianHui)</copyright>
    <lastBuildDate>Thu, 30 Jul 2020 10:42:26 +0800</lastBuildDate>
    
	<atom:link href="http://dingjianhui.top/tags/go%E5%88%9D%E7%BA%A7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>限制协程执行数量的基本方法(防止机器跑崩)</title>
      <link>http://dingjianhui.top/post/2020/07/30/go-goroutine-num/</link>
      <pubDate>Thu, 30 Jul 2020 10:42:26 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/30/go-goroutine-num/</guid>
      <description>介绍 我们在开发过程中，如果不对Goroutine加以控制而进行滥用的话， 可能会导致服务程序整体崩溃。 实现代码 使用类似数据库连接池，redis</description>
    </item>
    
    <item>
      <title>如何使用golang定义枚举</title>
      <link>http://dingjianhui.top/post/2020/07/30/go-define-enum/</link>
      <pubDate>Thu, 30 Jul 2020 09:29:31 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/30/go-define-enum/</guid>
      <description>前言 枚举就是一一列举，将所有的情况都列举出来，那么取值的时候只能是这几种情况的一种，不能是别的。 Golang 中没有 enum 关键字，要定义枚举可以使用 const 配合 iota</description>
    </item>
    
    <item>
      <title>Golang 测试用例的写法-单元测试、性能测试</title>
      <link>http://dingjianhui.top/post/2020/07/22/go-test/</link>
      <pubDate>Thu, 23 Jul 2020 15:05:10 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/22/go-test/</guid>
      <description>简介 go 自带单元测试和性能测试模块，仅需要很少的代码就可以快速测试一段需求代码 准则 需要创建一个名称以 _test.go 结尾的文件 该文件包含 测试用例 (如：Tes</description>
    </item>
    
    <item>
      <title>Golang Map的使用案例--设置值、排序、多个map排序</title>
      <link>http://dingjianhui.top/post/2020/07/21/go-map/</link>
      <pubDate>Tue, 21 Jul 2020 16:12:41 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/21/go-map/</guid>
      <description>Map(集合) Map 是一种无序的键值对的集合 定义初始化 1 2 3 4 5 6 7 8 9 // 定义map type ( UserMap map[string]interface{} ) // 初始化map func NewUser() UserMap { return make(map[string]interface{}) // 使用make初始化 } 设</description>
    </item>
    
    <item>
      <title>Golang技巧之默认值设置的高阶玩法</title>
      <link>http://dingjianhui.top/post/2020/07/20/go-struct-default-value/</link>
      <pubDate>Mon, 20 Jul 2020 17:42:49 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/20/go-struct-default-value/</guid>
      <description>传参时，不改变属性默认值时就不传该参数 1. 普通玩法 比如php中 1 2 3 4 public function addLog($log_type,$log_content,$admin_id,$admin_name,$type = 2) { ...... } 调用 $this-&amp;gt;log-&amp;gt;addLog(0</description>
    </item>
    
    <item>
      <title>Golang 中协程调度的简单理解</title>
      <link>http://dingjianhui.top/post/2020/07/07/go-scheduler/</link>
      <pubDate>Tue, 07 Jul 2020 11:24:21 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/07/go-scheduler/</guid>
      <description>调度逻辑 1. P、M、G的定义 P: processor(代表处理器核)，P的数量决定了系统内最大可并行的G的数量（前提：系统的物理cpu核数&amp;gt;</description>
    </item>
    
    <item>
      <title>grpc的优势与安装使用-Golang</title>
      <link>http://dingjianhui.top/post/2020/06/28/go-grpc-quick-start/</link>
      <pubDate>Sun, 28 Jun 2020 13:47:36 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/28/go-grpc-quick-start/</guid>
      <description>前言 对于分布式系统而言,不同的服务分布在不同的节点上,一个服务要完成自己的功能经常需要调用其他服务的接口,比如典型的微服务架构。 通常这种服务</description>
    </item>
    
    <item>
      <title>Golang中Defer的机制解读与defer的用法</title>
      <link>http://dingjianhui.top/post/2020/06/24/go-defer-used/</link>
      <pubDate>Wed, 24 Jun 2020 09:04:03 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/24/go-defer-used/</guid>
      <description>defer介绍 关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 return 语句之后）一刻才执行某个语句或函数 （为什么要在返回之后才执行这些语句？因为</description>
    </item>
    
    <item>
      <title>etcd入门之环境搭建与命令使用(基于docker)</title>
      <link>http://dingjianhui.top/post/2020/06/11/etcd-install/</link>
      <pubDate>Thu, 11 Jun 2020 13:14:58 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/11/etcd-install/</guid>
      <description>etcd简介 A distributed, reliable key-value store for the most critical data of a distributed system etcd是一个高可用的键值存储系统 etcd是由CoreOS开发并维护的,灵感来自于 ZooKeeper 等。它使用Go语</description>
    </item>
    
    <item>
      <title>Golang中string、byte、rune的区别</title>
      <link>http://dingjianhui.top/post/2020/06/06/go-strings-byte-rune/</link>
      <pubDate>Sat, 06 Jun 2020 15:29:25 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/06/go-strings-byte-rune/</guid>
      <description>什么是string string 是不可变的字节序列,采用utf8编码的 字节切片(slice), 因此用len函数获取到的长度并不是字符个数，而是字节个数。</description>
    </item>
    
    <item>
      <title>windows 开发环境下 go 交叉编译</title>
      <link>http://dingjianhui.top/post/2020/06/05/go-cross-compile/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/05/go-cross-compile/</guid>
      <description>linux 1 2 3 set GOOS=linux set GOARCH=amd64 go build -o build/hugo main.go windows 1 2 3 set GOOS=windows set GOARCH=amd64 go build -o build/hugo.exe main.go PS：环境变量参数参考： 1 2 GOARCH:amd64,386,arm,ppc64,…GO</description>
    </item>
    
  </channel>
</rss>