[{"content":"修饰模式是常见的一种设计模式,例如：中间件就可以使用到这种设计模式 逼格点： 允许向一个现有的对象添加新的功能，同时又不改变其结构 示例1： 1 2 3","lvl0":"Golang实现装饰器模式(Decorator)","lvl1":["golang"],"lvl2":"摘要","objectID":"0852445ff8342adc3c823479bd07791e","tags":["go"],"url":"http://dingjianhui.top/post/2020/09/11/go-decorator/"},{"content":"工厂模式是我们最常用的实例化对象模式了，是用工厂方法代替new操作的一种模式 简单工厂模式 （Simple Factory Pattern） 我们想要创建一个对象","lvl0":"使用Golang实现工厂模式(Factory-Pattern)","lvl1":["golang"],"lvl2":"摘要","objectID":"50c3427ea5cc88347062cc0b96577508","tags":["go"],"url":"http://dingjianhui.top/post/2020/09/10/go-factory/"},{"content":"单例模式是一种常用的软件设计模式 Go语言实现单例模式的有四种方式，分别是懒汉模式、饿汉模式、双重检查和 sync.Once。 懒汉模式-就是创建","lvl0":"Golang实现单例模式（Singleton）- sync.Once","lvl1":["golang"],"lvl2":"摘要","objectID":"0edab143abf373bb71369f5a8f860372","tags":["go"],"url":"http://dingjianhui.top/post/2020/09/07/go-singleton/"},{"content":"介绍 我们在开发过程中，如果不对Goroutine加以控制而进行滥用的话， 可能会导致服务程序整体崩溃。 实现代码 使用类似数据库连接池，redis","lvl0":"限制协程执行数量的基本方法(防止机器跑崩)","lvl1":["golang"],"lvl2":"摘要","objectID":"b020a4c8b4fd324f0fcac161f041aa8b","tags":["go","go初级"],"url":"http://dingjianhui.top/post/2020/07/30/go-goroutine-num/"},{"content":"前言 枚举就是一一列举，将所有的情况都列举出来，那么取值的时候只能是这几种情况的一种，不能是别的。 Golang 中没有 enum 关键字，要定义枚举可以使用 const 配合 iota","lvl0":"如何使用golang定义枚举","lvl1":["golang"],"lvl2":"摘要","objectID":"615be43aeb4d1c91714622fd75dc2146","tags":["go","go初级"],"url":"http://dingjianhui.top/post/2020/07/30/go-define-enum/"},{"content":"官方文档 https://redis.io/ https://hub.docker.com/_/redis https://github.com/redis/redis 环境 CentOS 7 + docker + docker-compose + redis 5.0 以安装redis5.0.7为例,目前最新版是6.0.6 下载安装 redis redis:\u0026lt;version\u0026gt; redis:\u0026lt;version\u0026gt;-alpine 1 2 3 4 [tintin@localhost ~]$ docker pull redis:5.0.7-alpine [tintin@localhost ~]$ docker images REPOSITORY TAG IMAGE ID CREATED","lvl0":"Docker中安装Redis并设置安全选项","lvl1":["redis","docker"],"lvl2":"摘要","objectID":"8d263b17c301f1be299361d90c221a6d","tags":["docker","redis","安全","docker-compose","centos7"],"url":"http://dingjianhui.top/post/2020/07/29/redis-set-security-options/"},{"content":"官方文档 https://github.com/golang/mock https://godoc.org/github.com/golang/mock/gomock 介绍 GoMock is a mocking framework for the Go programming language. GoMock是由Golang官方开发维护的测试框架，实现了较为完整的基于interface的Mock功能","lvl0":"Golang 测试进阶之gomock框架(单元测试)","lvl1":["golang"],"lvl2":"摘要","objectID":"77bf9482722fbaea607603d0111b11d3","tags":["go","go测试"],"url":"http://dingjianhui.top/post/2020/07/26/go-test-mock/"},{"content":"简介 go 自带单元测试和性能测试模块，仅需要很少的代码就可以快速测试一段需求代码 准则 需要创建一个名称以 _test.go 结尾的文件 该文件包含 测试用例 (如：Tes","lvl0":"Golang 测试用例的写法-单元测试、性能测试","lvl1":["golang"],"lvl2":"摘要","objectID":"43a19b2d444223a7aa7badd06630439b","tags":["go","go测试","go初级"],"url":"http://dingjianhui.top/post/2020/07/22/go-test/"},{"content":"Map(集合) Map 是一种无序的键值对的集合 定义初始化 1 2 3 4 5 6 7 8 9 // 定义map type ( UserMap map[string]interface{} ) // 初始化map func NewUser() UserMap { return make(map[string]interface{}) // 使用make初始化 } 设","lvl0":"Golang Map的使用案例--设置值、排序、多个map排序","lvl1":["golang"],"lvl2":"摘要","objectID":"f128cee721a15d662eca8eaad94d3570","tags":["go","go初级"],"url":"http://dingjianhui.top/post/2020/07/21/go-map/"},{"content":"传参时，不改变属性默认值时就不传该参数 1. 普通玩法 比如php中 1 2 3 4 public function addLog($log_type,$log_content,$admin_id,$admin_name,$type = 2) { ...... } 调用 $this-\u0026gt;log-\u0026gt;addLog(0","lvl0":"Golang技巧之默认值设置的高阶玩法","lvl1":["golang"],"lvl2":"摘要","objectID":"1ddc062041ef077396bf756a42ca472e","tags":["go","go初级"],"url":"http://dingjianhui.top/post/2020/07/20/go-struct-default-value/"},{"content":"调度逻辑 1. P、M、G的定义 P: processor(代表处理器核)，P的数量决定了系统内最大可并行的G的数量（前提：系统的物理cpu核数\u0026gt;","lvl0":"Golang 中协程调度的简单理解","lvl1":["golang"],"lvl2":"摘要","objectID":"a9f34d788ed590b6405fd775406725f1","tags":["go","协程","go初级"],"url":"http://dingjianhui.top/post/2020/07/07/go-scheduler/"},{"content":"官方文档(基于golang语言) 流式RPC(服务端流式RPC、客户端流式RPC、双向流式RPC) https://www.grpc.io/docs/languages/go/basics 官方案例： https://github.com/grpc/grpc-go/tree/master/examples/route_guide 根据不同的业务场景, grpc 支持 4 种","lvl0":"流式RPC的使用例子(基于Golang)","lvl1":["golang","rpc"],"lvl2":"摘要","objectID":"0b7fb90caf44fef97b80838d1315427c","tags":["go","grpc"],"url":"http://dingjianhui.top/post/2020/07/03/go-grpc-stream/"},{"content":"前言 Protobuf[1] 是一种语言中立、平台无关、可扩展的序列化数据的格式，可用于通信协议，数据存储等。 ProtoBuf 在序列化数据方面，它是灵活的、高效的。 相比于 XML 来说，","lvl0":"Protobuf语法-常用语法 (Protobu3)","lvl1":["rpc"],"lvl2":"摘要","objectID":"828da27e1d1f9a835fcdccfbbcb2ed1d","tags":["protobuf","grpc"],"url":"http://dingjianhui.top/post/2020/07/01/protobuf-grammar/"},{"content":"前言 grpc很棒-支持多种语言来构建rpc服务,快速、易于使用、带宽高效， 但是我们仍然希望提供供传统的RESTful JSON API，兼容老系统 通常","lvl0":"使用grpc-gateway同时提供rpc和Restful接口-Golang","lvl1":["golang","rpc"],"lvl2":"摘要","objectID":"5ddbaa78da5299ab7d21b07b555aeeed","tags":["go","grpc","gateway"],"url":"http://dingjianhui.top/post/2020/06/30/go-grpc-gateway/"},{"content":"OpenSSL工具下载： 下载地址链接 windows环境 自签证书 进入 bin目录 执行 openssl.exe 执行 genrsa -des3 -out server.key 2048（会生成server.key,私钥文件","lvl0":"自签名https证书，本地浏览器测试","lvl1":["openssl"],"lvl2":"摘要","objectID":"9ced1273de88d6a6393272e0d0433c9d","tags":["https","openssl"],"url":"http://dingjianhui.top/post/2020/06/30/generate-local-certificate/"},{"content":"前言 对于分布式系统而言,不同的服务分布在不同的节点上,一个服务要完成自己的功能经常需要调用其他服务的接口,比如典型的微服务架构。 通常这种服务","lvl0":"grpc的优势与安装使用-Golang","lvl1":["golang","rpc"],"lvl2":"摘要","objectID":"7aa7458c4aa051aeea62befd26ac2b77","tags":["go","grpc","go初级"],"url":"http://dingjianhui.top/post/2020/06/28/go-grpc-quick-start/"},{"content":"简易示意图 Confd简介 一款高可用统一配置管理工具(go写的) Confd安装使用 Step 1. 构建Confd镜像(使用go镜像) 1 2 3 4 5 6 [tintin@localhost ttphp]$ ls etcd etcds","lvl0":"Golang + Etcd + Confd 实现简易的配置中心","lvl1":["golang","etcd"],"lvl2":"摘要","objectID":"14343577ce70579038fe45de90fa0887","tags":["etcd","go"],"url":"http://dingjianhui.top/post/2020/06/26/go-etcd-simple-config-center/"},{"content":"二叉查找树(binary search tree) 特征： 二叉查找树，也称二叉搜索树，或二叉排序树。 要么是一颗空树，要么就是具有如下性质的二叉树： （1） 若任意节点的","lvl0":"使用Golang实现二叉查找树案例","lvl1":["golang"],"lvl2":"摘要","objectID":"06037d549fa001f27bd878b588d173ab","tags":["二叉树","go"],"url":"http://dingjianhui.top/post/2020/06/24/go-binary-search-tree/"},{"content":"defer介绍 关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 return 语句之后）一刻才执行某个语句或函数 （为什么要在返回之后才执行这些语句？因为","lvl0":"Golang中Defer的机制解读与defer的用法","lvl1":["golang"],"lvl2":"摘要","objectID":"a3e5e8bd665d369d4b30d0553b2f5bc6","tags":["defer","go","go初级"],"url":"http://dingjianhui.top/post/2020/06/24/go-defer-used/"},{"content":"示意图 服务注册 1.服务提供者 创建服务 2.服务提供者 配置etcd 3.服务提供者 把服务注册到配置的etcd中 4.服务启动 5.服务关闭时反注册服务","lvl0":"Go + Etcd V3 实现 服务注册与发现","lvl1":["golang","etcd"],"lvl2":"摘要","objectID":"ca25ae0bf8a54519c90f415bea550078","tags":["go","etcd"],"url":"http://dingjianhui.top/post/2020/06/19/go-etcd-v3-service-discovery/"},{"content":"安装文档-以官方文档为准 官方文档 https://docs.docker.com/engine/install/centos/ Step 1 卸载旧版本 1 2 3 4 5 6 7 8 $ sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine Step 2 设置存储库 安装utils工具包 （依","lvl0":"Centos 7系统中安装docker \u0026 Docker Compose","lvl1":["docker","centos"],"lvl2":"摘要","objectID":"d93a7f0ae4b87720d67f7ff84e0fc78e","tags":["docker","centos7"],"url":"http://dingjianhui.top/post/2020/06/17/centos-docker-install/"},{"content":"实际中部署集群 使用不同机器 或 docker swarm 或 k8s 来部署 Step 1 创建一个专门的docker网络 创建docker网络 (使用的是bridge,指定了子网) docker network create etcdnet","lvl0":"使用docker模拟etcd集群的创建","lvl1":["docker","etcd"],"lvl2":"摘要","objectID":"916b9e7f96207eb9f190d8d162c2f66a","tags":["docker","etcd"],"url":"http://dingjianhui.top/post/2020/06/11/etcd-cluster-by-docker/"},{"content":"etcd简介 A distributed, reliable key-value store for the most critical data of a distributed system etcd是一个高可用的键值存储系统 etcd是由CoreOS开发并维护的,灵感来自于 ZooKeeper 等。它使用Go语","lvl0":"etcd入门之环境搭建与命令使用(基于docker)","lvl1":["docker","etcd"],"lvl2":"摘要","objectID":"6024c3ff935be90563a4832e0c24d12c","tags":["docker","etcd","go初级"],"url":"http://dingjianhui.top/post/2020/06/11/etcd-install/"},{"content":"什么是string string 是不可变的字节序列,采用utf8编码的 字节切片(slice), 因此用len函数获取到的长度并不是字符个数，而是字节个数。","lvl0":"Golang中string、byte、rune的区别","lvl1":["golang"],"lvl2":"摘要","objectID":"44ef0c7ce0d5a23d1fcde2556a71c8c2","tags":["go","go初级"],"url":"http://dingjianhui.top/post/2020/06/06/go-strings-byte-rune/"},{"content":"linux set GOOS=linux set GOARCH=amd64 go build -o build/hugo main.go windows set GOOS=windows set GOARCH=amd64 go build -o build/hugo.exe main.go PS：环境变量参数参考： 1 2 GOARCH:amd64,386,arm,ppc64,…GOOS:lin","lvl0":"windows 开发环境下 go 交叉编译","lvl1":["golang"],"lvl2":"摘要","objectID":"7732c91a04d22f705eef92c04eeaae29","tags":["go","go初级"],"url":"http://dingjianhui.top/post/2020/06/05/go-cross-compile/"}]