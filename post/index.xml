<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ding Jianhui 的个人博客 - 笔记</title>
    <link>http://dingjianhui.top/post/</link>
    <description>Recent content in Posts on Ding Jianhui 的个人博客 - 笔记</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>dingo(Ding JianHui)</copyright>
    <lastBuildDate>Mon, 07 Sep 2020 21:22:25 +0800</lastBuildDate>
    
	<atom:link href="http://dingjianhui.top/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>nacos1.3.2在windows中启动失败</title>
      <link>http://dingjianhui.top/post/2020/09/07/nacos-windows-error/</link>
      <pubDate>Mon, 07 Sep 2020 21:22:25 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/09/07/nacos-windows-error/</guid>
      <description>下载的nacos1.3.2，安装好jdk后启动失败 版本 nacos版本：nacos-server-1.3.2 jdk版本：jdk-13.0.1 环</description>
    </item>
    
    <item>
      <title>谈一谈Golang的单例模式（Singleton）</title>
      <link>http://dingjianhui.top/post/2020/09/07/go-singleton/</link>
      <pubDate>Mon, 07 Sep 2020 08:11:50 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/09/07/go-singleton/</guid>
      <description>单例模式是一种常用的软件设计模式 Go语言实现单例模式的有四种方式，分别是懒汉模式、饿汉模式、双重检查和 sync.Once。 懒汉模式-就是创建</description>
    </item>
    
    <item>
      <title>限制协程执行数量的基本方法(防止机器跑崩)</title>
      <link>http://dingjianhui.top/post/2020/07/30/go-goroutine-num/</link>
      <pubDate>Thu, 30 Jul 2020 10:42:26 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/30/go-goroutine-num/</guid>
      <description>介绍 我们在开发过程中，如果不对Goroutine加以控制而进行滥用的话， 可能会导致服务程序整体崩溃。 实现代码 使用类似数据库连接池，redis</description>
    </item>
    
    <item>
      <title>如何使用golang定义枚举</title>
      <link>http://dingjianhui.top/post/2020/07/30/go-define-enum/</link>
      <pubDate>Thu, 30 Jul 2020 09:29:31 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/30/go-define-enum/</guid>
      <description>前言 枚举就是一一列举，将所有的情况都列举出来，那么取值的时候只能是这几种情况的一种，不能是别的。 Golang 中没有 enum 关键字，要定义枚举可以使用 const 配合 iota</description>
    </item>
    
    <item>
      <title>Docker中安装Redis并设置安全选项</title>
      <link>http://dingjianhui.top/post/2020/07/29/redis-set-security-options/</link>
      <pubDate>Wed, 29 Jul 2020 09:54:54 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/29/redis-set-security-options/</guid>
      <description>官方文档 https://redis.io/ https://hub.docker.com/_/redis https://github.com/redis/redis 环境 CentOS 7 + docker + docker-compose + redis 5.0 以安装redis5.0.7为例,目前最新版是6.0.6 下载安装 redis redis:&amp;lt;version&amp;gt; redis:&amp;lt;version&amp;gt;-alpine 1 2 3 4 [tintin@localhost ~]$ docker pull redis:5.0.7-alpine [tintin@localhost ~]$ docker images REPOSITORY TAG IMAGE ID CREATED</description>
    </item>
    
    <item>
      <title>Golang 测试进阶之gomock框架(单元测试)</title>
      <link>http://dingjianhui.top/post/2020/07/26/go-test-mock/</link>
      <pubDate>Sun, 26 Jul 2020 07:55:30 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/26/go-test-mock/</guid>
      <description>官方文档 https://github.com/golang/mock https://godoc.org/github.com/golang/mock/gomock 介绍 GoMock is a mocking framework for the Go programming language. GoMock是由Golang官方开发维护的测试框架，实现了较为完整的基于interface的Mock功能</description>
    </item>
    
    <item>
      <title>Golang 测试用例的写法-单元测试、性能测试</title>
      <link>http://dingjianhui.top/post/2020/07/22/go-test/</link>
      <pubDate>Thu, 23 Jul 2020 15:05:10 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/22/go-test/</guid>
      <description>简介 go 自带单元测试和性能测试模块，仅需要很少的代码就可以快速测试一段需求代码 准则 需要创建一个名称以 _test.go 结尾的文件 该文件包含 测试用例 (如：Tes</description>
    </item>
    
    <item>
      <title>Golang Map的使用案例--设置值、排序、多个map排序</title>
      <link>http://dingjianhui.top/post/2020/07/21/go-map/</link>
      <pubDate>Tue, 21 Jul 2020 16:12:41 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/21/go-map/</guid>
      <description>Map(集合) Map 是一种无序的键值对的集合 定义初始化 1 2 3 4 5 6 7 8 9 // 定义map type ( UserMap map[string]interface{} ) // 初始化map func NewUser() UserMap { return make(map[string]interface{}) // 使用make初始化 } 设</description>
    </item>
    
    <item>
      <title>Golang技巧之默认值设置的高阶玩法</title>
      <link>http://dingjianhui.top/post/2020/07/20/go-struct-default-value/</link>
      <pubDate>Mon, 20 Jul 2020 17:42:49 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/20/go-struct-default-value/</guid>
      <description>传参时，不改变属性默认值时就不传该参数 1. 普通玩法 比如php中 1 2 3 4 public function addLog($log_type,$log_content,$admin_id,$admin_name,$type = 2) { ...... } 调用 $this-&amp;gt;log-&amp;gt;addLog(0</description>
    </item>
    
    <item>
      <title>Golang 中协程调度的简单理解</title>
      <link>http://dingjianhui.top/post/2020/07/07/go-scheduler/</link>
      <pubDate>Tue, 07 Jul 2020 11:24:21 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/07/go-scheduler/</guid>
      <description>调度逻辑 1. P、M、G的定义 P: processor(代表处理器核)，P的数量决定了系统内最大可并行的G的数量（前提：系统的物理cpu核数&amp;gt;</description>
    </item>
    
    <item>
      <title>流式RPC的使用例子(基于Golang)</title>
      <link>http://dingjianhui.top/post/2020/07/03/go-grpc-stream/</link>
      <pubDate>Fri, 03 Jul 2020 15:07:02 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/03/go-grpc-stream/</guid>
      <description>官方文档(基于golang语言) 流式RPC(服务端流式RPC、客户端流式RPC、双向流式RPC) https://www.grpc.io/docs/languages/go/basics 官方案例： https://github.com/grpc/grpc-go/tree/master/examples/route_guide 根据不同的业务场景, grpc 支持 4 种</description>
    </item>
    
    <item>
      <title>Protobuf语法-常用语法 (Protobu3)</title>
      <link>http://dingjianhui.top/post/2020/07/01/protobuf-grammar/</link>
      <pubDate>Wed, 01 Jul 2020 13:45:32 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/07/01/protobuf-grammar/</guid>
      <description>前言 Protobuf[1] 是一种语言中立、平台无关、可扩展的序列化数据的格式，可用于通信协议，数据存储等。 ProtoBuf 在序列化数据方面，它是灵活的、高效的。 相比于 XML 来说，</description>
    </item>
    
    <item>
      <title>使用grpc-gateway同时提供rpc和Restful接口-Golang</title>
      <link>http://dingjianhui.top/post/2020/06/30/go-grpc-gateway/</link>
      <pubDate>Tue, 30 Jun 2020 14:53:25 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/30/go-grpc-gateway/</guid>
      <description>前言 grpc很棒-支持多种语言来构建rpc服务,快速、易于使用、带宽高效， 但是我们仍然希望提供供传统的RESTful JSON API，兼容老系统 通常</description>
    </item>
    
    <item>
      <title>自签名https证书，本地浏览器测试</title>
      <link>http://dingjianhui.top/post/2020/06/30/generate-local-certificate/</link>
      <pubDate>Tue, 30 Jun 2020 11:45:16 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/30/generate-local-certificate/</guid>
      <description>OpenSSL工具下载： 下载地址链接 windows环境 自签证书 进入 bin目录 执行 openssl.exe 执行 genrsa -des3 -out server.key 2048（会生成server.key,私钥文件</description>
    </item>
    
    <item>
      <title>grpc的优势与安装使用-Golang</title>
      <link>http://dingjianhui.top/post/2020/06/28/go-grpc-quick-start/</link>
      <pubDate>Sun, 28 Jun 2020 13:47:36 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/28/go-grpc-quick-start/</guid>
      <description>前言 对于分布式系统而言,不同的服务分布在不同的节点上,一个服务要完成自己的功能经常需要调用其他服务的接口,比如典型的微服务架构。 通常这种服务</description>
    </item>
    
    <item>
      <title>Golang &#43; Etcd &#43; Confd 实现简易的配置中心</title>
      <link>http://dingjianhui.top/post/2020/06/26/go-etcd-simple-config-center/</link>
      <pubDate>Fri, 26 Jun 2020 15:50:48 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/26/go-etcd-simple-config-center/</guid>
      <description>简易示意图 Confd简介 一款高可用统一配置管理工具(go写的) Confd安装使用 Step 1. 构建Confd镜像(使用go镜像) 1 2 3 4 5 6 [tintin@localhost ttphp]$ ls etcd etcds</description>
    </item>
    
    <item>
      <title>使用Golang实现二叉查找树案例</title>
      <link>http://dingjianhui.top/post/2020/06/24/go-binary-search-tree/</link>
      <pubDate>Wed, 24 Jun 2020 18:04:15 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/24/go-binary-search-tree/</guid>
      <description>二叉查找树(binary search tree) 特征： 二叉查找树，也称二叉搜索树，或二叉排序树。 要么是一颗空树，要么就是具有如下性质的二叉树： （1） 若任意节点的</description>
    </item>
    
    <item>
      <title>Golang中Defer的机制解读与defer的用法</title>
      <link>http://dingjianhui.top/post/2020/06/24/go-defer-used/</link>
      <pubDate>Wed, 24 Jun 2020 09:04:03 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/24/go-defer-used/</guid>
      <description>defer介绍 关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 return 语句之后）一刻才执行某个语句或函数 （为什么要在返回之后才执行这些语句？因为</description>
    </item>
    
    <item>
      <title>Go &#43; Etcd V3 实现 服务注册与发现</title>
      <link>http://dingjianhui.top/post/2020/06/19/go-etcd-v3-service-discovery/</link>
      <pubDate>Fri, 19 Jun 2020 16:45:07 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/19/go-etcd-v3-service-discovery/</guid>
      <description>示意图 服务注册 1.服务提供者 创建服务 2.服务提供者 配置etcd 3.服务提供者 把服务注册到配置的etcd中 4.服务启动 5.服务关闭时反注册服务</description>
    </item>
    
    <item>
      <title>Centos 7系统中安装docker &amp; Docker Compose</title>
      <link>http://dingjianhui.top/post/2020/06/17/centos-docker-install/</link>
      <pubDate>Wed, 17 Jun 2020 14:15:53 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/17/centos-docker-install/</guid>
      <description>安装文档-以官方文档为准 官方文档 https://docs.docker.com/engine/install/centos/ Step 1 卸载旧版本 1 2 3 4 5 6 7 8 $ sudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-engine Step 2 设置存储库 安装utils工具包 （依</description>
    </item>
    
    <item>
      <title>使用docker模拟etcd集群的创建</title>
      <link>http://dingjianhui.top/post/2020/06/11/etcd-cluster-by-docker/</link>
      <pubDate>Thu, 11 Jun 2020 17:14:58 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/11/etcd-cluster-by-docker/</guid>
      <description>实际中部署集群 使用不同机器 或 docker swarm 或 k8s 来部署 Step 1 创建一个专门的docker网络 创建docker网络 (使用的是bridge,指定了子网) docker network create etcdnet</description>
    </item>
    
    <item>
      <title>etcd入门之环境搭建与命令使用(基于docker)</title>
      <link>http://dingjianhui.top/post/2020/06/11/etcd-install/</link>
      <pubDate>Thu, 11 Jun 2020 13:14:58 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/11/etcd-install/</guid>
      <description>etcd简介 A distributed, reliable key-value store for the most critical data of a distributed system etcd是一个高可用的键值存储系统 etcd是由CoreOS开发并维护的,灵感来自于 ZooKeeper 等。它使用Go语</description>
    </item>
    
    <item>
      <title>Golang中string、byte、rune的区别</title>
      <link>http://dingjianhui.top/post/2020/06/06/go-strings-byte-rune/</link>
      <pubDate>Sat, 06 Jun 2020 15:29:25 +0800</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/06/go-strings-byte-rune/</guid>
      <description>什么是string string 是不可变的字节序列,采用utf8编码的 字节切片(slice), 因此用len函数获取到的长度并不是字符个数，而是字节个数。</description>
    </item>
    
    <item>
      <title>windows 开发环境下 go 交叉编译</title>
      <link>http://dingjianhui.top/post/2020/06/05/go-cross-compile/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://dingjianhui.top/post/2020/06/05/go-cross-compile/</guid>
      <description>linux set GOOS=linux set GOARCH=amd64 go build -o build/hugo main.go windows set GOOS=windows set GOARCH=amd64 go build -o build/hugo.exe main.go PS：环境变量参数参考： 1 2 GOARCH:amd64,386,arm,ppc64,…GOOS:lin</description>
    </item>
    
  </channel>
</rss>